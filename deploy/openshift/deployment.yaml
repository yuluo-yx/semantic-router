apiVersion: apps/v1
kind: Deployment
metadata:
  name: semantic-router
  namespace: vllm-semantic-router-system
  labels:
    app: semantic-router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: semantic-router
  template:
    metadata:
      labels:
        app: semantic-router
      annotations:
        cdi.k8s.io/model-a: k8s.device-plugin.nvidia.com/gpu=0
        cdi.k8s.io/model-b: k8s.device-plugin.nvidia.com/gpu=1
    spec:
      # GPU node selection and toleration
      nodeSelector:
        nvidia.com/gpu.present: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Equal
        value: "True"
        effect: NoSchedule
      initContainers:
      - name: model-downloader
        image: python:3.11-slim
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          echo "Installing Hugging Face CLI..."
          pip install --no-cache-dir huggingface_hub[cli]

          echo "Downloading models to persistent volume..."
          cd /app/models

          # Download category classifier model with ALL files to see what's available
          if [ ! -d "category_classifier_modernbert-base_model" ] || [ -z "$(find category_classifier_modernbert-base_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading category classifier model (all files)..."
            huggingface-cli download LLM-Semantic-Router/category_classifier_modernbert-base_model --local-dir category_classifier_modernbert-base_model --cache-dir /app/cache/hf
          else
            echo "Category classifier model already exists, skipping..."
          fi

          # Download PII classifier model with ALL files
          if [ ! -d "pii_classifier_modernbert-base_model" ] || [ -z "$(find pii_classifier_modernbert-base_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading PII classifier model (all files)..."
            huggingface-cli download LLM-Semantic-Router/pii_classifier_modernbert-base_model --local-dir pii_classifier_modernbert-base_model --cache-dir /app/cache/hf
          else
            echo "PII classifier model already exists, skipping..."
          fi

          # Download jailbreak classifier model with ALL files
          if [ ! -d "jailbreak_classifier_modernbert-base_model" ] || [ -z "$(find jailbreak_classifier_modernbert-base_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading jailbreak classifier model (all files)..."
            huggingface-cli download LLM-Semantic-Router/jailbreak_classifier_modernbert-base_model --local-dir jailbreak_classifier_modernbert-base_model --cache-dir /app/cache/hf
          else
            echo "Jailbreak classifier model already exists, skipping..."
          fi

          # Download PII token classifier model with ALL files
          if [ ! -d "pii_classifier_modernbert-base_presidio_token_model" ] || [ -z "$(find pii_classifier_modernbert-base_presidio_token_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading PII token classifier model (all files)..."
            huggingface-cli download LLM-Semantic-Router/pii_classifier_modernbert-base_presidio_token_model --local-dir pii_classifier_modernbert-base_presidio_token_model --cache-dir /app/cache/hf
          else
            echo "PII token classifier model already exists, skipping..."
          fi

          echo "All models downloaded successfully!"
          ls -la /app/models/

          echo "Setting proper permissions for models directory..."
          # Make model files readable by group (OpenShift containers share the same group)
          find /app/models -type f -exec chmod 644 {} \; || echo "Warning: Could not change model file permissions"
          find /app/models -type d -exec chmod 755 {} \; || echo "Warning: Could not change model directory permissions"

          echo "Creating cache directories with proper permissions..."
          mkdir -p /app/cache/hf /app/cache/transformers /app/cache/sentence_transformers /app/cache/xdg /app/cache/bert
          chmod -R 777 /app/cache/ || echo "Warning: Could not change cache directory permissions (will rely on OpenShift defaults)"

          echo "Model download complete. Verifying directory structure..."
          ls -la /app/models/
          ls -la /app/cache/
        env:
        - name: HF_HUB_CACHE
          value: /app/cache/hf
        - name: HF_HOME
          value: /app/cache/hf
        - name: TRANSFORMERS_CACHE
          value: /app/cache/transformers
        - name: PIP_CACHE_DIR
          value: /tmp/pip_cache
        - name: PYTHONUSERBASE
          value: /tmp/python_user
        - name: PATH
          value: /tmp/python_user/bin:/usr/local/bin:/usr/bin:/bin
        # Reduced resource requirements for init container
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
        - name: cache-volume
          mountPath: /app/cache
      containers:
      - name: semantic-router
        image: ghcr.io/vllm-project/semantic-router/extproc:latest
        # No args - use insecure gRPC for localhost communication within pod
        # Removed runAsNonRoot: false for OpenShift compatibility
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        ports:
        - containerPort: 50051
          name: grpc
          protocol: TCP
        - containerPort: 9190
          name: metrics
          protocol: TCP
        - containerPort: 8080
          name: classify-api
          protocol: TCP
        env:
        - name: LD_LIBRARY_PATH
          value: "/app/lib"
        - name: HF_HOME
          value: "/app/cache/hf"
        - name: TRANSFORMERS_CACHE
          value: "/app/cache/transformers"
        - name: SENTENCE_TRANSFORMERS_HOME
          value: "/app/cache/sentence_transformers"
        - name: XDG_CACHE_HOME
          value: "/app/cache/xdg"
        - name: HOME
          value: "/tmp/home"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: models-volume
          mountPath: /app/models
        - name: cache-volume
          mountPath: /app/cache
        livenessProbe:
          tcpSocket:
            port: 50051
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 50051
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        # Resource requirements optimized for OpenShift
        resources:
          requests:
            memory: "3Gi"
            cpu: "1"
          limits:
            memory: "6Gi"
            cpu: "2"
      # Real LLM specialist containers using llm-katan
      - name: model-a
        image: image-registry.openshift-image-registry.svc:5000/vllm-semantic-router-system/llm-katan:latest
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        command: ["llm-katan"]
        args: ["--model", "Qwen/Qwen3-0.6B", "--port", "8000", "--served-model-name", "Model-A", "--max-tokens", "512", "--temperature", "0.7", "--log-level", "INFO", "--device", "auto"]
        env:
        - name: HF_HUB_CACHE
          value: "/app/cache/hf"
        - name: TRANSFORMERS_CACHE
          value: "/app/cache/transformers"
        - name: HF_HOME
          value: "/app/cache/hf"
        - name: HOME
          value: "/tmp/home"
        volumeMounts:
        - name: cache-volume
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 5
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
            nvidia.com/gpu: "1"
          limits:
            memory: "4Gi"
            cpu: "1"
            nvidia.com/gpu: "1"
      - name: model-b
        image: image-registry.openshift-image-registry.svc:5000/vllm-semantic-router-system/llm-katan:latest
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        command: ["llm-katan"]
        args: ["--model", "Qwen/Qwen3-0.6B", "--port", "8001", "--served-model-name", "Model-B", "--max-tokens", "512", "--temperature", "0.7", "--log-level", "INFO", "--device", "auto"]
        env:
        - name: HF_HUB_CACHE
          value: "/app/cache/hf"
        - name: TRANSFORMERS_CACHE
          value: "/app/cache/transformers"
        - name: HF_HOME
          value: "/app/cache/hf"
        - name: HOME
          value: "/tmp/home"
        volumeMounts:
        - name: cache-volume
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /
            port: 8001
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 5
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
            nvidia.com/gpu: "1"
          limits:
            memory: "4Gi"
            cpu: "1"
            nvidia.com/gpu: "1"
      # Envoy proxy container
      - name: envoy-proxy
        image: envoyproxy/envoy:v1.35.3
        ports:
        - containerPort: 8801
          name: envoy-http
          protocol: TCP
        - containerPort: 19000
          name: envoy-admin
          protocol: TCP
        command: ["/usr/local/bin/envoy"]
        args: ["-c", "/etc/envoy/envoy.yaml", "--component-log-level", "ext_proc:info,router:info,http:info"]
        env:
        - name: loglevel
          value: "info"
        volumeMounts:
        - name: envoy-config-volume
          mountPath: /etc/envoy
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          tcpSocket:
            port: 8801
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8801
          initialDelaySeconds: 10
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: config-volume
        configMap:
          name: semantic-router-config
      - name: envoy-config-volume
        configMap:
          name: envoy-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: semantic-router-models
      - name: cache-volume
        persistentVolumeClaim:
          claimName: semantic-router-cache
